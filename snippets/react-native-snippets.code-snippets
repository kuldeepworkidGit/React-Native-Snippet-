{
  "Import React with useEffect": {
    "prefix": "ir",
    "body": "import React, { useEffect } from 'react';",
    "description": "Import React with useEffect"
  },
  "Import React Native core components": {
    "prefix": "irn",
    "body": "import { View, StyleSheet, Text } from 'react-native';",
    "description": "Import core components from React Native"
  },
  "Empty StyleSheet": {
    "prefix": "istyle",
    "body": ["const styles = StyleSheet.create({", "  ", "});"],
    "description": "Create an empty StyleSheet"
  },
  "React Native App Component": {
    "prefix": "ifunction",
    "body": [
      "import React from 'react';",
      "import { View, Text, StyleSheet } from 'react-native';",
      "",
      "const MyComponent = () => {",
      "  return (",
      "    <View style={styles.container}>",
      "      <Text>Hello, this is a React Native component!</Text>",
      "    </View>",
      "  );",
      "};",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    flex: 1,",
      "    justifyContent: 'center',",
      "    alignItems: 'center',",
      "  },",
      "});",
      "",
      "export default MyComponent;"
    ],
    "description": "Basic React Native app component template"
  },

  "useState Hook": {
    "prefix": "ius",
    "body": ["const [, set] = useState();"],
    "description": "useState hook"
  },
  "useEffect Hook": {
    "prefix": "iue",
    "body": [
      "useEffect(() => {",
      "    // Your effect logic here",
      "",
      "    return () => {",
      "        // Clean up logic here",
      "    };",
      "}, []);"
    ],
    "description": "useEffect hook"
  },
  "useCallback Hook": {
    "prefix": "iucb",
    "body": [
      "const memoizedCallback = useCallback(() => {",
      "    // Callback logic here",
      "}, []);"
    ],
    "description": "useCallback hook"
  },
  "useRef Hook": {
    "prefix": "iur",
    "body": ["const myRef = useRef();"],
    "description": "useRef hook"
  },
  "useMemo Hook": {
    "prefix": "ium",
    "body": [
      "const memoizedValue = useMemo(() => {",
      "    // Your memoized value logic here",
      "}, []);"
    ],
    "description": "useMemo hook"
  },
  "useContext Hook": {
    "prefix": "iuc",
    "body": ["const contextValue = useContext(MyContext);"],
    "description": "useContext hook"
  },
  "useReducer Hook": {
    "prefix": "iur",
    "body": ["const [state, dispatch] = useReducer(reducer, initialState);"],
    "description": "useReducer hook"
  },

  "MyTextComp Component": {
    "prefix": "itext",
    "body": [
      "import React from 'react';",
      "import {StyleSheet, Text, TextProps, TextStyle} from 'react-native';",
      "",
      "interface MyTextProps extends TextProps {",
      "  value: string;",
      "  style?: TextStyle | TextStyle[];",
      "}",
      "",
      "function MyTextComp(props: MyTextProps): React.JSX.Element {",
      "  const {value, style, ...rest} = props;",
      "  return (",
      "    <Text style={[styles.container, style]} {...rest}>",
      "      {value}",
      "    </Text>",
      "  );",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    fontSize: 16,",
      "  },",
      "});",
      "",
      "export default MyTextComp;"
    ],
    "description": "A custom Text component that accepts 'value' and 'style' props"
  },
  "Loader Component": {
    "prefix": "iloader",
    "body": [
      "import React from 'react';",
      "import { ActivityIndicator } from 'react-native';",
      "",
      "interface LoaderProps {",
      "  size?: 'small' | 'large';  // Optional size prop for customizing the loader size",
      "  color?: string;            // Optional color prop for customizing the loader color",
      "  visible?: boolean;         // Optional visible prop to control loader visibility",
      "}",
      "",
      "const Loader: React.FC<LoaderProps> = ({ size = 'small', color = 'red', visible = true }) => {",
      "  if (!visible) return null;  // If loader is not visible, return nothing",
      "",
      "  return <ActivityIndicator size={size} color={color} />;",
      "};",
      "",
      "export default Loader;"
    ],
    "description": "A customizable Loader component using ActivityIndicator"
  },
  "Redux Toolkit Slice": {
    "prefix": "islice",
    "body": [
      "import { createSlice, PayloadAction } from '@reduxjs/toolkit';",
      "",
      "interface DummyState {",
      "  value: number;",
      "}",
      "",
      "const initialState: DummyState = {",
      "  value: 0,",
      "};",
      "",
      "const dummySlice = createSlice({",
      "  name: 'dummy',",
      "  initialState,",
      "  reducers: {",
      "    increment: (state) => {",
      "      state.value += 1;",
      "    },",
      "    decrement: (state) => {",
      "      state.value -= 1;",
      "    },",
      "    setValue: (state, action: PayloadAction<number>) => {",
      "      state.value = action.payload;",
      "    },",
      "  },",
      "});",
      "",
      "export const { increment, decrement, setValue } = dummySlice.actions;",
      "",
      "export default dummySlice.reducer;"
    ],
    "description": "Redux Toolkit dummy slice with increment, decrement, and setValue reducers"
  },

  "Redux Toolkit Store Configuration": {
    "prefix": "istore",
    "body": [
      "import { configureStore } from '@reduxjs/toolkit';",
      "import todosReducer from '../features/todos/todosSlice';",
      "import filtersReducer from '../features/filters/filtersSlice';",
      "",
      "export const store = configureStore({",
      "  reducer: {",
      "    todos: todosReducer,",
      "    filters: filtersReducer,",
      "  },",
      "});",
      "",
      "// Optional: export RootState and AppDispatch types for use throughout the app",
      "export type RootState = ReturnType<typeof store.getState>;",
      "export type AppDispatch = typeof store.dispatch;"
    ],
    "description": "Redux Toolkit store with multiple slice reducers"
  },

  "useDebouncedCallback Hook": {
    "prefix": "idebounce",
    "body": [
      "import React, { useRef } from 'react';",
      "",
      "type DebouncedFunction<T extends (...args: any[]) => void> = (",
      "  ...args: Parameters<T>",
      ") => void;",
      "",
      "const useDebouncedCallback = <T extends (...args: any[]) => void>(",
      "  callback: T,",
      "  delay: number",
      "): DebouncedFunction<T> => {",
      "  const timeoutRef = useRef<number | null>(null);",
      "",
      "  const debouncedFunction: DebouncedFunction<T> = (...args) => {",
      "    if (timeoutRef.current !== null) {",
      "      clearTimeout(timeoutRef.current);",
      "    }",
      "",
      "    timeoutRef.current = setTimeout(() => {",
      "      callback(...args);",
      "    }, delay) as unknown as number;",
      "  };",
      "",
      "  return debouncedFunction;",
      "};",
      "",
      "export default useDebouncedCallback;"
    ],
    "description": "A custom React hook for creating a debounced callback function"
  },
  "MyButton Component": {
    "prefix": "ibutton",
    "body": [
      "import React from 'react';",
      "import {",
      "  StyleSheet,",
      "  Pressable,",
      "  PressableProps,",
      "  Text,",
      "  ActivityIndicator,",
      "} from 'react-native';",
      "",
      "interface ButtonProps extends PressableProps {",
      "  title: string;",
      "  isLoading?: boolean;",
      "  type?: 'hollow' | 'filled';",
      "}",
      "",
      "function MyButton(props: ButtonProps): React.JSX.Element {",
      "  const { title, isLoading, type, ...rest } = props;",
      "  return (",
      "    <Pressable",
      "      style={[styles.container, type === 'filled' && styles.filledContainer]}",
      "      disabled={isLoading}",
      "      {...rest}",
      "    >",
      "      {isLoading ? (",
      "        <ActivityIndicator />",
      "      ) : (",
      "        <Text style={styles.title}>{title}</Text>",
      "      )}",
      "    </Pressable>",
      "  );",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    borderWidth: 1,",
      "    height: 56,",
      "    borderRadius: 8,",
      "    justifyContent: 'center',",
      "  },",
      "  title: {",
      "    textTransform: 'uppercase',",
      "    textAlign: 'center',",
      "    fontWeight: 'bold',",
      "  },",
      "  filledContainer: {",
      "    backgroundColor: '#9CD3D9',",
      "    borderColor: '#9CD3D9',",
      "  },",
      "});",
      "",
      "export default MyButton;"
    ],
    "description": "Custom reusable button component with loading and style variants and hollow/filled types"
  },
  "Bottom Tab Navigator": {
    "prefix": "ibottomtab",
    "body": [
      "import React from 'react';",
      "import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';",
      "import { Image, ImageSourcePropType, StyleSheet, Text, View } from 'react-native';",
      "",
      "// TODO: Import your screen components and icons",
      "// import HomeScreen from '../screens/HomeScreen';",
      "// import CartScreen from '../screens/CartScreen';",
      "// import IconHome from '../assets/icon-home.png';",
      "// import IconCategory from '../assets/icon-category.png';",
      "",
      "const Tab = createBottomTabNavigator();",
      "",
      "const Icon = (color: string, source: ImageSourcePropType) => (",
      "  <Image style={[styles.icon, { tintColor: color }]} source={source} />",
      ");",
      "",
      "const IconWithBadge = (",
      "  color: string,",
      "  source: ImageSourcePropType,",
      "  count: number",
      ") => {",
      "  return (",
      "    <View>",
      "      <Image style={[styles.icon, { tintColor: color }]} source={source} />",
      "      <View style={styles.iconBadge}>",
      "        <Text style={styles.iconBadgeText}>{count.toString()}</Text>",
      "      </View>",
      "    </View>",
      "  );",
      "};",
      "",
      "function MyBottomTabs(): React.JSX.Element {",
      "  return (",
      "    <Tab.Navigator",
      "      screenOptions={{",
      "        headerShown: false,",
      "        tabBarActiveTintColor: 'red',",
      "        tabBarInactiveTintColor: 'grey',",
      "      }}",
      "    >",
      "      <Tab.Screen",
      "        name=\"HOME\"",
      "        component={HomeScreen}",
      "        options={{",
      "          tabBarIcon: ({ color }) => Icon(color, IconHome),",
      "        }}",
      "      />",
      "      <Tab.Screen",
      "        name=\"CART\"",
      "        component={CartScreen}",
      "        options={{",
      "          tabBarIcon: ({ color }) => IconWithBadge(color, IconCategory, 2),",
      "        }}",
      "      />",
      "    </Tab.Navigator>",
      "  );",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "  icon: {",
      "    height: 24,",
      "    width: 24,",
      "    resizeMode: 'contain',",
      "  },",
      "  iconBadge: {",
      "    width: 16,",
      "    height: 16,",
      "    backgroundColor: 'red',",
      "    borderRadius: 99,",
      "    position: 'absolute',",
      "    top: 0,",
      "    right: -10,",
      "    justifyContent: 'center',",
      "    alignItems: 'center',",
      "  },",
      "  iconBadgeText: {",
      "    color: '#FFF',",
      "    fontWeight: 'bold',",
      "    fontSize: 10,",
      "  },",
      "});",
      "",
      "export default MyBottomTabs;"
    ],
    "description": "React Navigation Bottom Tab Navigator with badge support"
  },
  "MyInput Component": {
    "prefix": "iinput",
    "body": [
      "import React from 'react';",
      "import { View, StyleSheet, TextInput, TextInputProps } from 'react-native';",
      "",
      "interface InputProps extends TextInputProps {",
      "  onChangeText: (text: string) => void;",
      "  placeholder?: string;",
      "  placeholderTextColor?: string;",
      "}",
      "",
      "const MyInput: React.FC<InputProps> = ({",
      "  onChangeText,",
      "  placeholder = 'Search',",
      "  placeholderTextColor = 'black',",
      "  ...rest",
      "}) => {",
      "  return (",
      "    <View style={styles.container}>",
      "      <TextInput",
      "        style={styles.input}",
      "        onChangeText={onChangeText}",
      "        placeholder={placeholder}",
      "        placeholderTextColor={placeholderTextColor}",
      "        {...rest}",
      "      />",
      "    </View>",
      "  );",
      "};",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    padding: 10,",
      "    shadowColor: '#000',",
      "    shadowOffset: { width: 0, height: 3 },",
      "    shadowOpacity: 0.29,",
      "    shadowRadius: 4.65,",
      "    backgroundColor: '#FFF',",
      "    elevation: 7,",
      "    borderTopLeftRadius: 20,",
      "    borderTopRightRadius: 20,",
      "  },",
      "  input: {",
      "    borderWidth: 1,",
      "    height: 56,",
      "    borderRadius: 8,",
      "    borderColor: 'grey',",
      "    paddingHorizontal: 10,",
      "    color: '#000',",
      "  },",
      "});",
      "",
      "export default MyInput;"
    ],
    "description": "Reusable styled TextInput component with custom props"
  },

  "Custom Redux Selector Hook": {
    "prefix": "iuseselector",
    "body": [
      "// Replace 'useCustomHookName' with the name of your custom hook",
      "// Replace 'YourSliceType' with the TypeScript type for the slice",
      "// Replace 'yourSliceName' with the actual key in your Redux store",
      "export const useCustomHookName = (): YourSliceType =>",
      "  useSelector((state: RootState) => state.yourSliceName);"
    ],
    "description": "Custom Redux selector hook with comments for customization"
  }
}
